// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: order.sql

package db

import (
	"context"
	"database/sql"
)

const createOrder = `-- name: CreateOrder :one
INSERT INTO orders (customer_id, total)
VALUES ($1, $2)
RETURNING id, customer_id, total
`

type CreateOrderParams struct {
	CustomerID sql.NullInt64
	Total      sql.NullInt32
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (Order, error) {
	row := q.db.QueryRowContext(ctx, createOrder, arg.CustomerID, arg.Total)
	var i Order
	err := row.Scan(&i.ID, &i.CustomerID, &i.Total)
	return i, err
}

const deleteOrder = `-- name: DeleteOrder :exec
DELETE FROM orders WHERE id = $1
`

func (q *Queries) DeleteOrder(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteOrder, id)
	return err
}

const getOrder = `-- name: GetOrder :one
SELECT id, customer_id, total FROM orders WHERE id = $1
`

func (q *Queries) GetOrder(ctx context.Context, id int64) (Order, error) {
	row := q.db.QueryRowContext(ctx, getOrder, id)
	var i Order
	err := row.Scan(&i.ID, &i.CustomerID, &i.Total)
	return i, err
}

const listOrders = `-- name: ListOrders :many
SELECT id, customer_id, total FROM orders
`

func (q *Queries) ListOrders(ctx context.Context) ([]Order, error) {
	rows, err := q.db.QueryContext(ctx, listOrders)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Order
	for rows.Next() {
		var i Order
		if err := rows.Scan(&i.ID, &i.CustomerID, &i.Total); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrder = `-- name: UpdateOrder :exec
UPDATE orders
SET customer_id = $2, total = $3
WHERE id = $1
`

type UpdateOrderParams struct {
	ID         int64
	CustomerID sql.NullInt64
	Total      sql.NullInt32
}

func (q *Queries) UpdateOrder(ctx context.Context, arg UpdateOrderParams) error {
	_, err := q.db.ExecContext(ctx, updateOrder, arg.ID, arg.CustomerID, arg.Total)
	return err
}
