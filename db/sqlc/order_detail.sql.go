// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: order_detail.sql

package db

import (
	"context"
	"database/sql"
)

const createOrderDetail = `-- name: CreateOrderDetail :one
INSERT INTO order_detail (order_id, ticket_id, price, qty, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, order_id, ticket_id, price, qty, created_at, updated_at
`

type CreateOrderDetailParams struct {
	OrderID   sql.NullInt64
	TicketID  sql.NullInt64
	Price     sql.NullInt32
	Qty       sql.NullInt32
	CreatedAt sql.NullTime
	UpdatedAt sql.NullTime
}

func (q *Queries) CreateOrderDetail(ctx context.Context, arg CreateOrderDetailParams) (OrderDetail, error) {
	row := q.db.QueryRowContext(ctx, createOrderDetail,
		arg.OrderID,
		arg.TicketID,
		arg.Price,
		arg.Qty,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i OrderDetail
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.TicketID,
		&i.Price,
		&i.Qty,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteOrderDetail = `-- name: DeleteOrderDetail :exec
DELETE FROM order_detail WHERE id = $1
`

func (q *Queries) DeleteOrderDetail(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteOrderDetail, id)
	return err
}

const getOrderDetail = `-- name: GetOrderDetail :one
SELECT id, order_id, ticket_id, price, qty, created_at, updated_at FROM order_detail WHERE id = $1
`

func (q *Queries) GetOrderDetail(ctx context.Context, id int64) (OrderDetail, error) {
	row := q.db.QueryRowContext(ctx, getOrderDetail, id)
	var i OrderDetail
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.TicketID,
		&i.Price,
		&i.Qty,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listOrderDetails = `-- name: ListOrderDetails :many
SELECT id, order_id, ticket_id, price, qty, created_at, updated_at FROM order_detail
`

func (q *Queries) ListOrderDetails(ctx context.Context) ([]OrderDetail, error) {
	rows, err := q.db.QueryContext(ctx, listOrderDetails)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []OrderDetail
	for rows.Next() {
		var i OrderDetail
		if err := rows.Scan(
			&i.ID,
			&i.OrderID,
			&i.TicketID,
			&i.Price,
			&i.Qty,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrderDetail = `-- name: UpdateOrderDetail :exec
UPDATE order_detail
SET order_id = $2, ticket_id = $3, price = $4, qty = $5, updated_at = $6
WHERE id = $1
`

type UpdateOrderDetailParams struct {
	ID        int64
	OrderID   sql.NullInt64
	TicketID  sql.NullInt64
	Price     sql.NullInt32
	Qty       sql.NullInt32
	UpdatedAt sql.NullTime
}

func (q *Queries) UpdateOrderDetail(ctx context.Context, arg UpdateOrderDetailParams) error {
	_, err := q.db.ExecContext(ctx, updateOrderDetail,
		arg.ID,
		arg.OrderID,
		arg.TicketID,
		arg.Price,
		arg.Qty,
		arg.UpdatedAt,
	)
	return err
}
