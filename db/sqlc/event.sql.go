// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: event.sql

package db

import (
	"context"
	"database/sql"
)

const createEvent = `-- name: CreateEvent :one
INSERT INTO event (author_id, name, date, location, description, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, author_id, name, date, location, description, created_at, updated_at
`

type CreateEventParams struct {
	AuthorID    sql.NullInt64
	Name        sql.NullString
	Date        sql.NullTime
	Location    sql.NullString
	Description sql.NullString
	CreatedAt   sql.NullTime
	UpdatedAt   sql.NullTime
}

func (q *Queries) CreateEvent(ctx context.Context, arg CreateEventParams) (Event, error) {
	row := q.db.QueryRowContext(ctx, createEvent,
		arg.AuthorID,
		arg.Name,
		arg.Date,
		arg.Location,
		arg.Description,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.AuthorID,
		&i.Name,
		&i.Date,
		&i.Location,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteEvent = `-- name: DeleteEvent :exec
DELETE FROM event WHERE id = $1
`

func (q *Queries) DeleteEvent(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteEvent, id)
	return err
}

const getEvent = `-- name: GetEvent :one
SELECT id, author_id, name, date, location, description, created_at, updated_at FROM event WHERE id = $1
`

func (q *Queries) GetEvent(ctx context.Context, id int64) (Event, error) {
	row := q.db.QueryRowContext(ctx, getEvent, id)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.AuthorID,
		&i.Name,
		&i.Date,
		&i.Location,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateEvent = `-- name: UpdateEvent :exec
UPDATE event
SET author_id = $2, name = $3, date = $4, location = $5, description = $6, updated_at = $7
WHERE id = $1
`

type UpdateEventParams struct {
	ID          int64
	AuthorID    sql.NullInt64
	Name        sql.NullString
	Date        sql.NullTime
	Location    sql.NullString
	Description sql.NullString
	UpdatedAt   sql.NullTime
}

func (q *Queries) UpdateEvent(ctx context.Context, arg UpdateEventParams) error {
	_, err := q.db.ExecContext(ctx, updateEvent,
		arg.ID,
		arg.AuthorID,
		arg.Name,
		arg.Date,
		arg.Location,
		arg.Description,
		arg.UpdatedAt,
	)
	return err
}
