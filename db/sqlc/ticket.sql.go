// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: ticket.sql

package db

import (
	"context"
	"database/sql"
)

const createTicket = `-- name: CreateTicket :one
INSERT INTO ticket (event_id, name, amount, price, status, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, event_id, name, amount, price, status, created_at, updated_at
`

type CreateTicketParams struct {
	EventID   sql.NullInt64
	Name      string
	Amount    sql.NullInt32
	Price     sql.NullInt32
	Status    sql.NullInt32
	CreatedAt sql.NullTime
	UpdatedAt sql.NullTime
}

func (q *Queries) CreateTicket(ctx context.Context, arg CreateTicketParams) (Ticket, error) {
	row := q.db.QueryRowContext(ctx, createTicket,
		arg.EventID,
		arg.Name,
		arg.Amount,
		arg.Price,
		arg.Status,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Ticket
	err := row.Scan(
		&i.ID,
		&i.EventID,
		&i.Name,
		&i.Amount,
		&i.Price,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteTicket = `-- name: DeleteTicket :exec
DELETE FROM ticket WHERE id = $1
`

func (q *Queries) DeleteTicket(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTicket, id)
	return err
}

const getTicket = `-- name: GetTicket :one
SELECT id, event_id, name, amount, price, status, created_at, updated_at FROM ticket WHERE id = $1
`

func (q *Queries) GetTicket(ctx context.Context, id int64) (Ticket, error) {
	row := q.db.QueryRowContext(ctx, getTicket, id)
	var i Ticket
	err := row.Scan(
		&i.ID,
		&i.EventID,
		&i.Name,
		&i.Amount,
		&i.Price,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listTickets = `-- name: ListTickets :many
SELECT id, event_id, name, amount, price, status, created_at, updated_at FROM ticket ORDER BY created_at DESC
`

func (q *Queries) ListTickets(ctx context.Context) ([]Ticket, error) {
	rows, err := q.db.QueryContext(ctx, listTickets)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Ticket
	for rows.Next() {
		var i Ticket
		if err := rows.Scan(
			&i.ID,
			&i.EventID,
			&i.Name,
			&i.Amount,
			&i.Price,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTicket = `-- name: UpdateTicket :exec
UPDATE ticket
SET event_id = $2, name = $3, amount = $4, price = $5, status = $6, updated_at = $7
WHERE id = $1
`

type UpdateTicketParams struct {
	ID        int64
	EventID   sql.NullInt64
	Name      string
	Amount    sql.NullInt32
	Price     sql.NullInt32
	Status    sql.NullInt32
	UpdatedAt sql.NullTime
}

func (q *Queries) UpdateTicket(ctx context.Context, arg UpdateTicketParams) error {
	_, err := q.db.ExecContext(ctx, updateTicket,
		arg.ID,
		arg.EventID,
		arg.Name,
		arg.Amount,
		arg.Price,
		arg.Status,
		arg.UpdatedAt,
	)
	return err
}
